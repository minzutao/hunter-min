<!---title:Android架构简介-->
<!---keywords:Android,入门,简介,架构,介绍-->
<!---date:2013.05.23-->

#什么是 Android?

Android 是一个专门针对移动设备的软件集,它包括一个操作系统,中间件和一些重要的应用程序. Beta 版
的 Android SDK 提供了在 Android 平台上使用 JaVa 语言进行 Android 应用开发必须的工具和 API 接口. 

##特性

* **应用程序框架** 支持组件的重用与替换
* **Dalvik 虚拟机** 专为移动设备优化
* **集成的浏览器** 基于开源的 WebKit 引擎
* **优化的图形库** 包括定制的2D 图形库,3D 图形库基于 OpenGL ES 1.0 (硬件加速可选)
* **SQLite** 用作结构化的数据存储
* **多媒体支持** 包括常见的音频、视频和静态图像格式(如 MPEG4, H.264, MP3, AAC, AMR, JPG, PNG, GIF)
* **GSM 电话技术** (依赖于硬件)
* **蓝牙 Bluetooth, EDGE, 3G, 和 WiFi** (依赖于硬件)
* **照相机,GPS GPS,指南针,和加速度计(accelerometer)** (依赖于硬件)
* **丰富的开发环境** 包括设备模拟器,调试工具,内存及性能分析图表,和 Eclipse 集成开发环境插件

#android架构

![Android系统架构图](intro_arch.jpg)


##应用程序

Android 会同一系列核心应用程序包一起发布, 该应用程序包包括 email 客户端, SMS 短消息程序, 日历,
地图, 浏览器, 联系人管理程序等. 所有的应用程序都是使用 JAVA 语言编写的. 


##应用程序框架

开发人员也可以完全访问核心应用程序所使用的 API 框架. 该应用程序的架构设计简化了组件的重用; 
任何一个应用程序都可以发布它的功能块并且任何其它的应用程序都可以使用其所发布的功能块(不过得遵循框架的安全性限制).
同样, 该应用程序重用机制也使用户可以方便的替换程序组件. 

隐藏在每个应用后面的是一系列的服务和系统, 其中包括:

* **丰富而又可扩展的视图(Views)**: 可以用来构建应用程序, 它包括列表(lists) 网格 (grids) 文本框(text boxes),按钮 ( buttons) 甚至可嵌入的 web 浏览器. 
* **内容提供器(Content Providers)**: 使得应用程序可以访问另一个应用程序的数据 (如联系人数据库) 或者共享它们自己的数据.
* **资源管理器(Resource Manager)**: 提供非代码资源的访问,如本地字符串, 图形, 和布局文件( layout files ). 
* **通知管理器 (Notification Manager)**: 使得应用程序可以在状态栏中显示自定义的提示信息. 
* **活动管理器( Activity Manager)**: 用来管理应用程序生命周期并提供常用的导航回退功能. 

##程序库

Android 包含一些 C/C++库,这些库能被 Android 系统中不同的组件使用. 
它们通过 Android 应用程序框架为开发者提供服务. 以下是一些核心库:

* **系统C库**: 一个从 BSD 继承来的标准 C 系统函数库 libc ), 它是专门为基于 embedded linux的设备定制的. 
* **媒体库**: 基于 PacketVideo OpenCORE;该库支持多种常用的音频、视频格式回放和录制,同时支持静态图像文件. 编码格式包括 MPEG4, H.264, MP3, AAC, AMR, JPG, PNG . 
* **Surface Manager**: 对显示子系统的管理,并且为多个应用程序提 供了2D 和3D 图层的无缝融合. 
* **LibWebCore**: 一个最新的 web 浏览器引擎用,支持 Android 浏览器和一个可嵌入的 web 视图. 
* **SGL**: 底层的2D 图形引擎
* **3D libraries**: 基于 OpenGL ES 1.0 APIs 实现;该库可以使用硬件 3D 加速(如果可用)或者使用高度优化的3D 软加速. 
* **FreeType** -位图(bitmap)和矢量(vector)字体显示. 
* **SQLite**: 一个对于所有应用程序可用,功能强劲的轻型关系型数据库引擎. 

##Android 运行库

Android 包括了一个核心库,该核心库提供了 JAVA 编程语言核心库的大多数功能. 

Runtime 在 Dalvik Java VM 上, Dalvik 采用简练, 高效的 byte code 格式运行, 
它能够在低资耗和没有应用相互干扰的情况下并行执行多个应用.

每一个 Android 应用程序都在它自己的进程中运行, 都拥有一个独立的 Dalvik 虚拟机实例.
Dalvik 被设计成一个设备可以同时高效地运行多个虚拟系统.
Dalvik 虚拟机执行(.dex)的 Dalvik 可执行文件, 该格式文件针对小内存使用做了优化.
同时虚拟机是基于寄存器的, 所有的类都经由 JAVA 编译器编译, 然后通过 SDK 中的
"dx" 工具转化成 .dex 格式由虚拟机执行. 

Dalvik 虚拟机依赖于 linux 内核的一些功能,比如线程机制和底层内存管理机制. 

##Linux 内核

Android 的核心系统服务依赖于 Linux 2.6 内核, 如安全性, 内存管理, 进程管理, 网络协议栈和驱动模型.

在这里, Linux内核扮演的是硬件层和系统其它层次之间的一个抽象层的概念. 这个操作系统并非类 GNU/Linux 的,
因为其系统库, 系统初始化和编程接口都和标准的 Linux 系统是有所不同的。

从 Google 目前 release 的 Linux 系统来看, 其没有虚拟内存文件系统, 系统所用的是 yaffs2 文件系统,
具体的映像也都位于 SDK 安装目录下. 通过 emulator -console 命令,
我们可以在 host 中断下得到一个简单的可以控制 Android 的 shell, 这个系统包含了一个 Toolbox,
提供一些基本的命令工具, 集中在/sbin, /system/sbin, /system/bin 中, 但是很简陋, 命令种类也很少。

目前 Android 的程序安装模式是靠 Eclipse 自动进行的, 通过对底层的分析可知,大致步骤就是在/data/app 和
data/data 下存放 android 底层和普通内核没有什么大的区别, 我们可以将其作为一个 Linux 来进行开发和hacking。




<!-- vim:set tw=0:-->
